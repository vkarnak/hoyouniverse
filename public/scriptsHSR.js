function changeContent(section) {
  const content = document.getElementById("main-content");

  switch (section) {
    case "Dashboard":
      content.innerHTML =
        "<h1>Dashboard</h1><p>Here is the dashboard content.</p>";
      break;

    case "Plot":
      content.innerHTML = /*html*/ `
        <h1>Plot</h1>
        <p>The Herta Space Station is attacked by members of the Antimatter Legion, 
          followers of the Path of Destruction. Amidst the chaos, two Stellaron Hunters, Kafka and Silver Wolf, 
          infiltrate the station and steal the Stellaron that was being safely held within it. Kafka takes hold 
          of the Stellaron and inserts it into the body of an empty vessel generated by Silver Wolf (whose gender 
          and name are chosen by the player). The vessel (known as the Trailblazer in English and various other 
          names in other translations of the game) awakens, after which Kafka erases their memory, informs them 
          of the future that lies ahead, and leaves. They then fall unconscious. <br>A now-amnesic Trailblazer 
          wakes up and meets March 7th and Dan Heng. Both are traveling on the Astral Express, a large cosmic 
          train that travels the universe along the eponymous "Star Rail". After eliminating the remaining threats 
          from the Antimatter Legion, the Trailblazer meets Himeko, the Navigator of the Astral Express, and Welt 
          Yang, an interstellar traveler originating from the world of 
          <a href= "https://en.wikipedia.org/wiki/Honkai_Impact_3rd">Honkai Impact 3rd</a>. 
          In an attempt to discover their origins and eliminate the threats of the remaining Stellarons, 
          the Trailblazer departs with the Astral Express crew.</p>`;
      break;

    case "Planets":
      content.innerHTML = "<h1>Planets</h1><p></p>";
      break;

    case "Characters":
      content.innerHTML = /*html*/ `
        <div class="filters">
          <select id="filter-element" onchange="applyFilters()">
            <option value="">All Elements</option>
            <option value="Physical">Physical</option>
            <option value="Fire">Fire</option>
            <option value="Ice">Ice</option>
            <option value="Lightning">Lightning</option>
            <option value="Wind">Wind</option>
            <option value="Imaginary">Imaginary</option>
            <option value="Quantum">Quantum</option>
          </select>
          <select id="filter-path" onchange="applyFilters()">
            <option value="">All Paths</option>
            <option value="Destruction">Destruction</option>
            <option value="Hunt">Hunt</option>
            <option value="Preservation">Preservation</option>
            <option value="Abundance">Abundance</option>
            <option value="Erudition">Erudition</option>
            <option value="Harmony">Harmony</option>
            <option value="Nihility">Nihility</option>
          </select>
          <select id="filter-stars" onchange="applyFilters()">
            <option value="">All Stars</option>
            <option value="5">5 Stars</option>
            <option value="4">4 Stars</option>
          </select>
        </div>
        <div id="character-grid" class="row"></div>
      `;

      fetch("/charactersHSR")
        .then((response) => response.json())
        .then((data) => {
          // Сохраняем данные в глобальной переменной для фильтров
          window.characterData = data;
          renderCharacterGrid(data);
        })
        .catch((error) => {
          console.error("Error loading characters:", error);
        });
      break;
  }
}

function renderCharacterGrid(data) {
  const grid = document.getElementById("character-grid");
  let characterGrid = "";

  data.forEach((character) => {
    characterGrid += `
      <div class="col-6 col-md-3 mb-4">
          <div class="character-card">
            <img src="/images/characters/${character.name}.png" alt="${character.name}" class="img-fluid">
            <div class="character-info">
              <img src="/images/elements/${character.element}.png" alt="${character.element}" class="img-fluid">
              <img src="/images/path/${character.path}.png" alt="${character.path}" class="img-fluid">
              <img src="/images/stars/${character.stars}.png" alt="${character.stars}" class="img-fluid">
            </div>
          </div>
      </div>`;
  });

  grid.innerHTML = characterGrid;
}

function applyFilters() {
  const element = document.getElementById("filter-element").value;
  const path = document.getElementById("filter-path").value;
  const stars = document.getElementById("filter-stars").value;

  const filteredData = window.characterData.filter((character) => {
    return (
      (!element || character.element === element) &&
      (!path || character.path === path) &&
      (!stars || character.stars.toString() === stars)
    );
  });

  renderCharacterGrid(filteredData);
}
